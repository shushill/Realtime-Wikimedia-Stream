version: '3'

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    networks: 
      - broker-kafka
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:latest
    networks: 
      - broker-kafka
    volumes:
      - "kafka_data:/kafka-data"
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    networks: 
      - broker-kafka
    depends_on:
      - kafka
    ports:
      - 19000:9000
    environment:
      KAFKA_BROKERCONNECT: kafka:29092




# services:
#   zookeeper-server:
#     image: 'bitnami/zookeeper:latest'
#     networks:
#       - kafka-net
#     ports:
#       - '2181:2181'
#     environment:
#       - ALLOW_ANONYMOUS_LOGIN=yes


#   kafka-server:
#     image: 'bitnami/kafka:latest'
#     networks:
#       - kafka-net
#     volumes:
#       - "kafka_data:/kafka-data"
#     ports:
#       - '9092:9092'
#       - '29092:29092'
#     environment:
#       - KAFKA_BROKER_ID:1
#       - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper-server:2181
#       - ALLOW_PLAINTEXT_LISTENER=yes
#       - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
#       - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,PLAINTEXT_HOST://:29092
#       - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-server:9092,PLAINTEXT_HOST://kafka-server:29092
#     depends_on:
#       - zookeeper-server


#   kafdrop: 
#     image: obsidiandynamics/kafdrop:latest 
#     ports: 
#       - 9000:9000 
#     networks:
#       - kafka-net
#     environment: 
#       KAFKA_BROKERCONNECT: kafka-server:29092 
#     depends_on: 
#       - kafka-server 

  producer:
    build: 
      context: .
      dockerfile: ./backend/Dockerfile
    entrypoint: /app/backend/producer.sh
    ports:
      - "8081:8080"
    depends_on:
      - kafka
    networks:
      broker-kafka:
    environment:
      - KAFKA_SERVERS=kafka-server:29092,localhost:9092
    stdin_open: true
    tty: true

  consumer:
    build: 
      context: .
      dockerfile: ./backend/Dockerfile
    entrypoint: /app/backend/consumer.sh
    ports:
      - "8080:8080"
    depends_on:
      - mypostgres
      - kafka
    networks:
      broker-kafka:
      spring-postgres:
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://mypostgres:5432/mydb
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=password
      - SPRING_JPA_HIBERNATE_DDL_AUTO=create
      - KAFKA_SERVERS=kafka-server:29092
    stdin_open: true
    tty: true

  mypostgres:
    image: postgres:13.0-alpine
    restart: always
    ports:
    - "5432:5432"
    environment:
    - POSTGRES_PASSWORD=password
    - POSTGRES_USER=postgres
    - POSTGRES_DB=mydb
    volumes:
    - db-data:/var/lib/postgresql/data
    networks:
      spring-postgres:


networks: 
  broker-kafka:
  spring-postgres:



volumes:
  kafka_data:
  db-data: